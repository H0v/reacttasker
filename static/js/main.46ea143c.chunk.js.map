{"version":3,"sources":["serviceWorker.js","input/input.js","Tasks/tasks.js","index.js"],"names":["Boolean","window","location","hostname","match","Input","props","handleChange","event","setState","value","target","handleKeyDown","key","handleSubmit","currentValue","state","replace","trim","addNewTask","className","this","selectAllClassname","onClick","selectAll","onKeyDown","onChange","e","placeholder","React","Component","Tasks","tasks","id","taskId","title","isCompleted","editing","localStorage","setItem","JSON","stringify","clickCount","currentId","counter","index","setTimeout","changeStyle","clearTimeout","taskEdit","map","task","nameInput","focus","handleChanging","saveChanging","console","log","deleteTask","filter","isAllSelected","clearCompletedTasks","showCompleted","showAll","showActives","parse","getItem","length","currentTasks","type","checked","htmlFor","ref","input","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46ea143c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"../styles/styles.css\";\r\n\r\nclass Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = (event) =>  {\r\n    // debugger;\r\n    this.setState({ value: event.target.value });\r\n  }\r\n  \r\n  handleKeyDown = (event) => {\r\n    if(event.key === \"Enter\"){\r\n      this.handleSubmit();\r\n    }\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    let currentValue = this.state.value;\r\n        currentValue = currentValue.replace(/\\s\\s+/g, ' ').trim();\r\n    if(currentValue !== \"\"){\r\n      this.props.addNewTask(currentValue);\r\n      this.setState({\r\n        value: \"\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // JSON.parse(localStorage.getItem(\"tasks\")).length === 0 ? \"displayNone\" : \"checkAllButton\" \r\n    return (\r\n      <>\r\n      <div className = \"title\">\r\n      <span>tasker</span>\r\n      </div>\r\n        <div className=\"inputBox\">\r\n          <div className=\"checkAllDiv\">\r\n          <button className={this.props.selectAllClassname}onClick={this.props.selectAll}>&#10003;</button>\r\n          </div>\r\n          <input\r\n            // id =\"mainInput\"\r\n            value={this.state.value}\r\n            onKeyDown={this.handleKeyDown}\r\n            onChange={e => this.handleChange(e)}\r\n            placeholder=\"Type your task\"\r\n            className=\"mainInput\"\r\n          />\r\n          <button className=\"addButton\" onClick={this.handleSubmit}> Add </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Input from \"../input/input\";\r\n\r\nclass Tasks extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const filter = JSON.parse(localStorage.getItem(\"filter\")) || \"all\";\r\n    const tasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];\r\n    const taskId = tasks.length > 0 ? tasks[tasks.length - 1].id + 1 : 1;\r\n    this.state = {\r\n      tasks,\r\n      taskId,\r\n      counter: 0,\r\n      isAllSelected: false,\r\n      filter\r\n    };\r\n  }\r\n\r\n  addNewTask = value => {\r\n    this.setState(\r\n      state => ({\r\n        tasks: [\r\n          ...state.tasks,\r\n          { id: state.taskId, title: value, isCompleted: false, editing: false }\r\n        ],\r\n        taskId: state.taskId + 1\r\n      }),\r\n      () => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n      }\r\n    );\r\n  };\r\n\r\n  clickCount = currentId => {\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        counter: state.counter + 1\r\n      }),\r\n      () => {\r\n        if (this.state.counter === 1) {\r\n          this.index = setTimeout(() => {\r\n            this.setState({ counter: 0 });\r\n            this.changeStyle(currentId);\r\n          }, 400);\r\n        } else if (this.state.counter === 2) {\r\n          clearTimeout(this.index);\r\n          this.setState({ counter: 0 });\r\n          this.taskEdit(currentId);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  taskEdit = currentId => {\r\n    this.setState(state => ({\r\n      tasks: state.tasks.map(task =>\r\n        task.id === currentId ? { ...task, editing: true } : task\r\n      )\r\n    }));\r\n\r\n    setTimeout(() => {\r\n      this.nameInput.focus();\r\n    });\r\n  };\r\n\r\n  changeStyle = currentId => {\r\n    this.setState(\r\n      state => ({\r\n        tasks: state.tasks.map(task =>\r\n          task.id === currentId\r\n            ? {\r\n                ...task,\r\n                isCompleted: !task.isCompleted\r\n              }\r\n            : task\r\n        )\r\n      }),\r\n      () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks))\r\n    );\r\n  };\r\n\r\n  handleChanging = (currentId, event) => {\r\n    const value = event.target.value;\r\n\r\n    this.setState(state => ({\r\n      tasks: state.tasks.map(task =>\r\n        task.id === currentId ? { ...task, title: value } : task\r\n      )\r\n    }));\r\n  };\r\n\r\n  saveChanging = (currentId, event) => {\r\n    if (event.key === \"Enter\") {\r\n      const value = event.target.value.replace(/\\s\\s+/g, \" \").trim();\r\n      console.log(value);\r\n      if (value === \"\") {\r\n        this.deleteTask(currentId);\r\n      }\r\n\r\n      this.setState(\r\n        state => ({\r\n          tasks: state.tasks.map(task =>\r\n            task.id === currentId\r\n              ? {\r\n                  ...task,\r\n                  editing: false\r\n                }\r\n              : task\r\n          )\r\n        }),\r\n        () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks))\r\n      );\r\n    }\r\n  };\r\n\r\n  deleteTask = currentId => {\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        tasks: state.tasks.filter(task => task.id !== currentId)\r\n      }),\r\n      () => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n      }\r\n    );\r\n  };\r\n\r\n  selectAll = () => {\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        isAllSelected: !state.isAllSelected\r\n      }),\r\n      () => {\r\n        this.setState(\r\n          state => ({\r\n            ...state,\r\n            tasks: state.tasks.map(task => ({\r\n              ...task,\r\n              isCompleted: state.isAllSelected\r\n            }))\r\n          }),\r\n          () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks))\r\n        );\r\n      }\r\n    );\r\n  };\r\n\r\n  clearCompletedTasks = () => {\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        tasks: state.tasks.filter(task => task.isCompleted !== true)\r\n      }),\r\n      () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks))\r\n    );\r\n  };\r\n\r\n  showCompleted = () => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      filter: \"completed\"\r\n    }));\r\n  };\r\n\r\n  showAll = () => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      filter: \"all\"\r\n    }));\r\n  };\r\n  showActives = () => {\r\n    this.setState(state => ({\r\n      ...state,\r\n      filter: \"active\"\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    localStorage.setItem(\"filter\", JSON.stringify(this.state.filter));\r\n    let currentTasks = this.state.tasks;\r\n    if (this.state.filter === \"completed\") {\r\n      currentTasks = this.state.tasks.filter(task => task.isCompleted === true);\r\n    } else if (this.state.filter === \"all\") {\r\n      currentTasks = this.state.tasks;\r\n    } else if (this.state.filter === \"active\") {\r\n      currentTasks = this.state.tasks.filter(\r\n        task => task.isCompleted === false\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"contentBox\">\r\n          <Input selectAllClassname={this.state.tasks.length === 0 ? \"displayNone\" : \"checkAllButton\" } selectAll={this.selectAll} addNewTask={this.addNewTask} />\r\n          <ul className=\"ulContainer\">\r\n            {currentTasks.map(({ title, id, isCompleted, editing }) => (\r\n              <li key={`key-${id}`}>\r\n                <div className=\"divContainer\">\r\n                  <div className=\"checkBoxContainer\">\r\n                    <input\r\n                      onClick={() => this.clickCount(id)}\r\n                      type=\"checkbox\"\r\n                      checked={isCompleted}\r\n                      className={editing ? \"checkboxNone\" : \"taskCheckbox\"}\r\n                      id={`checkbox-${id}`}\r\n                    />\r\n                    <label htmlFor={`checkbox-${id}`}></label>\r\n                    </div>\r\n                      {editing ? (\r\n                    <div className=\"textContainer\">\r\n                        <input\r\n                          ref={input => {\r\n                            this.nameInput = input;\r\n                          }}\r\n                          className=\"editing\"\r\n                          value={title}\r\n                          onChange={event => this.handleChanging(id, event)}\r\n                          onKeyDown={event => this.saveChanging(id, event)}\r\n                        />\r\n                        </div>\r\n                      ) : (\r\n                        <>\r\n                    <div className=\"textContainer\">\r\n                          <span\r\n                            className={isCompleted ? \"checked\" : \"unchecked\"}\r\n                            onClick={() => this.clickCount(id)}\r\n                          >\r\n                            {title}\r\n                          </span>\r\n                     </div>     \r\n                          <div className=\"delButtonContainer\">\r\n                            <span\r\n                              className=\"delButton\"\r\n                              onClick={() => this.deleteTask(id)}\r\n                            >\r\n                              &times;\r\n                            </span>\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <div className={this.state.tasks.length === 0 ? \"displayNone\" : \"filterFooter\"}>\r\n            <div className=\"leftItems\">\r\n              <p>\r\n                {\r\n                  this.state.tasks.filter(task => task.isCompleted === false).length === 1 ? (\"1 item left\") : (this.state.tasks.filter(task => task.isCompleted === false).length + \" items left\")\r\n                } \r\n              </p>\r\n            </div>\r\n            <div className=\"filters\">\r\n              <button className={\"filterButton\" + ( this.state.filter === \"all\"?\" filterFocus\": \"\")} onClick={() => this.showAll()}>\r\n                All\r\n              </button>\r\n              <button\r\n                className={\"filterButton\" + ( this.state.filter === \"active\"?\" filterFocus\": \"\")}\r\n                onClick={() => this.showActives()}\r\n              >\r\n                Active\r\n              </button>\r\n              <button\r\n                className={\"filterButton\" + ( this.state.filter === \"completed\"?\" filterFocus\": \"\")}\r\n                onClick={() => this.showCompleted()}\r\n              >\r\n                Completed\r\n              </button>\r\n            </div>\r\n            <button\r\n              className={ this.state.tasks.filter(task =>task.isCompleted === true).length >= 1 ? \"filterButtonClear\":\"displayNone\"}\r\n              onClick={() => this.clearCompletedTasks()}\r\n            >\r\n              Clear Completed\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tasks;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Tasks from './Tasks/tasks';\n\nReactDOM.render(<Tasks />, document.getElementById('root'));\n\nserviceWorker.unregister()"],"sourceRoot":""}